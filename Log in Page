import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { motion } from 'framer-motion';
import { Cloud, BrainCircuit, Gem, KeyRound, Loader2 } from 'lucide-react'; // Icons for Cloud, AI, Web3, and Login

// Animation Variants
const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
        opacity: 1,
        transition: {
            delayChildren: 0.3,
            staggerChildren: 0.2,
        },
    },
};

const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
        y: 0,
        opacity: 1,
    },
};

const LoginPage = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setIsLoading(true);
        setError('');

        // Simulate an API call with a timeout.  Replace this with your actual authentication logic.
        try {
            // Basic validation
            if (!email || !password) {
                throw new Error("Please enter both email and password.");
            }

            // Simulate authentication delay
            await new Promise(resolve => setTimeout(resolve, 2000));

            // In a real app, you'd check credentials against a server here.
            if (email === 'test@example.com' && password === 'password') {
                // Successful login
                console.log('Logged in successfully!');
                // Redirect to a dashboard or main application page here.
                // For this example, we'll just reset the form.
                setEmail('');
                setPassword('');
            } else {
                throw new Error("Invalid credentials. Please try again.");
            }

        } catch (err: any) {
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-black flex items-center justify-center p-4">
            <motion.div
                className="w-full max-w-md bg-white/10 backdrop-blur-lg rounded-xl shadow-2xl border border-white/10 p-6 space-y-8"
                variants={containerVariants}
                initial="hidden"
                animate="visible"
            >
                <div className="text-center space-y-4">
                    <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-purple-400 flex items-center justify-center gap-2">
                        <Gem className="w-8 h-8" />
                        BCW Login
                    </h1>
                    <p className="text-gray-400 text-sm">
                        Login to access our cutting-edge platform for Cloud, AI, and Web 3 solutions.
                    </p>
                </div>

                <form onSubmit={handleSubmit} className="space-y-6">
                    <motion.div variants={itemVariants}>
                        <div className="space-y-2">
                            <Label htmlFor="email" className="text-gray-300">Email</Label>
                            <Input
                                id="email"
                                type="email"
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                                className="bg-black/20 text-white border-purple-500/30 placeholder:text-gray-500"
                                placeholder="Enter your email"
                                disabled={isLoading}
                            />
                        </div>
                    </motion.div>
                    <motion.div variants={itemVariants}>
                        <div className="space-y-2">
                            <Label htmlFor="password" className="text-gray-300">Password</Label>
                            <Input
                                id="password"
                                type="password"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                                className="bg-black/20 text-white border-purple-500/30 placeholder:text-gray-500"
                                placeholder="Enter your password"
                                disabled={isLoading}
                            />
                        </div>
                    </motion.div>

                    {error && (
                        <motion.p
                            variants={itemVariants}
                            className="text-red-400 text-sm"
                        >
                            {error}
                        </motion.p>
                    )}

                    <motion.div variants={itemVariants}>
                        <Button
                            type="submit"
                            className="w-full bg-gradient-to-r from-purple-500 to-blue-500 text-white py-3 rounded-full
                                        hover:from-purple-600 hover:to-blue-600 hover:scale-105 transition-all duration-300
                                        shadow-lg hover:shadow-purple-500/30 font-semibold flex items-center justify-center gap-2"
                            disabled={isLoading}
                        >
                            {isLoading ? (
                                <>
                                    <Loader2 className="w-5 h-5 animate-spin" />
                                    Logging in...
                                </>
                            ) : (
                                <>
                                    <KeyRound className="w-5 h-5" />
                                    Login
                                </>

                            )}
                        </Button>
                    </motion.div>
                </form>

                <motion.div variants={itemVariants} className="text-center text-gray-400 text-sm">
                    <p>
                        Don't have an account?{' '}
                        <a href="/register" className="text-blue-400 hover:underline">
                            Register
                        </a>
                        .
                    </p>
                </motion.div>
            </motion.div>
        </div>
    );
};

export default LoginPage;
